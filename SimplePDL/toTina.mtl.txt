[comment encoding = UTF-8 /]
[module toTina('http://petriNetMetamodel')]

[template public toTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name /]
[let places : OrderedSet(Place) = aPetriNet.getPlaces() ]
[for (p : Place | places)]
[p.toTina()/]
[/for]
[/let]
[let transitions : OrderedSet(Transition) = aPetriNet.getTransitions() ] 
[for (t : Transition | transitions)]
[t.toTina()/]
[/for]
[/let]
[/file]
[/template]
[query public getPlaces(p: PetriNet) : OrderedSet(Place) = 
	p.elements->select( e | e.oclIsTypeOf(Place) )
		->collect( e | e.oclAsType(Place) )
		->asOrderedSet()
/]
[query public getTransitions(p: PetriNet) : OrderedSet(Transition) = 
	p.elements->select( e | e.oclIsTypeOf(Transition) )
		->collect( e | e.oclAsType(Transition) )
		->asOrderedSet()
/]
[template public toTina(p : Place) post (trim()) ]
pl [p.name/] ([p.nbrJetons/]) 

[/template]

[template public toTina(t : Transition) post (trim()) ]
[let arcsIn : OrderedSet(Arc) = t.arcsIn] 
[let arcsOut : OrderedSet(Arc) = t.arcsOut ]
tr [t.name/] [for (a : Arc |arcsIn)][a.source.name/][if (a.type=arcType::read_arc)]?[else]*[/if][a.nbrJetons/] [/for]->[for (a : Arc |arcsOut)][if (a.nbrJetons >1)] [a.target.name/]*[a.nbrJetons/] [else] [a.target.name/][/if][/for]

[/let]
[/let]
[/template]